use serde::{Deserialize, Serialize};
use mongodb::bson::oid::ObjectId;

#[derive(Debug, Serialize, Deserialize)]
pub struct SwapsHistory {
    pub _id: ObjectId,
    pub pool: String, 
    pub start_time: i64,
    pub end_time: i64,
    pub to_asset_count: i64,
    pub to_rune_count: i64,
    pub to_trade_count: i64,
    pub from_trade_count: i64,
    pub synth_mint_count: i64,
    pub synth_redeem_count: i64,
    pub total_count: i64,
    pub to_asset_volume: f64,
    pub to_rune_volume: f64,
    pub to_trade_volume: f64,
    pub from_trade_volume: f64,
    pub synth_mint_volume: f64,
    pub synth_redeem_volume: f64,
    pub total_volume: f64,
    pub to_asset_volume_usd: f64,
    pub to_rune_volume_usd: f64,
    pub to_trade_volume_usd: f64,
    pub from_trade_volume_usd: f64,
    pub synth_mint_volume_usd: f64,
    pub synth_redeem_volume_usd: f64,
    pub total_volume_usd: f64,
    pub to_asset_fees: f64,
    pub to_rune_fees: f64,
    pub to_trade_fees: f64,
    pub from_trade_fees: f64,
    pub synth_mint_fees: f64,
    pub synth_redeem_fees: f64,
    pub total_fees: f64,
    pub to_asset_average_slip: f64,
    pub to_rune_average_slip: f64,
    pub to_trade_average_slip: f64,
    pub from_trade_average_slip: f64,
    pub synth_mint_average_slip: f64,
    pub synth_redeem_average_slip: f64,
    pub average_slip: f64,
    pub rune_price_usd: f64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Interval {
    pub start_time: String,
    pub end_time: String,
    pub to_asset_count: String,
    pub to_rune_count: String,
    pub to_trade_count: String,
    pub from_trade_count: String,
    pub synth_mint_count: String,
    pub synth_redeem_count: String,
    pub total_count: String,
    pub to_asset_volume: String,
    pub to_rune_volume: String,
    pub to_trade_volume: String,
    pub from_trade_volume: String,
    pub synth_mint_volume: String,
    pub synth_redeem_volume: String,
    pub total_volume: String,
    pub to_asset_volume_usd: String,
    pub to_rune_volume_usd: String,
    pub to_trade_volume_usd: String,
    pub from_trade_volume_usd: String,
    pub synth_mint_volume_usd: String,
    pub synth_redeem_volume_usd: String,
    pub total_volume_usd: String,
    pub to_asset_fees: String,
    pub to_rune_fees: String,
    pub to_trade_fees: String,
    pub from_trade_fees: String,
    pub synth_mint_fees: String,
    pub synth_redeem_fees: String,
    pub total_fees: String,
    pub to_asset_average_slip: String,
    pub to_rune_average_slip: String,
    pub to_trade_average_slip: String,
    pub from_trade_average_slip: String,
    pub synth_mint_average_slip: String,
    pub synth_redeem_average_slip: String,
    pub average_slip: String,
    pub rune_price_usd: String,
}

impl TryFrom<Interval> for SwapsHistory {
    type Error = Box<dyn std::error::Error>;

    fn try_from(interval: Interval) -> Result<Self, Self::Error> {
        Ok(Self {
            _id: ObjectId::new(),
            pool: "BTC.BTC".to_string(),
            start_time: interval.start_time.trim().parse::<i64>()?,
            end_time: interval.end_time.trim().parse::<i64>()?,
            to_asset_count: interval.to_asset_count.trim().parse::<i64>()?,
            to_rune_count: interval.to_rune_count.trim().parse::<i64>()?,
            to_trade_count: interval.to_trade_count.trim().parse::<i64>()?,
            from_trade_count: interval.from_trade_count.trim().parse::<i64>()?,
            synth_mint_count: interval.synth_mint_count.trim().parse::<i64>()?,
            synth_redeem_count: interval.synth_redeem_count.trim().parse::<i64>()?,
            total_count: interval.total_count.trim().parse::<i64>()?,
            to_asset_volume: interval.to_asset_volume.trim().parse::<f64>()?,
            to_rune_volume: interval.to_rune_volume.trim().parse::<f64>()?,
            to_trade_volume: interval.to_trade_volume.trim().parse::<f64>()?,
            from_trade_volume: interval.from_trade_volume.trim().parse::<f64>()?,
            synth_mint_volume: interval.synth_mint_volume.trim().parse::<f64>()?,
            synth_redeem_volume: interval.synth_redeem_volume.trim().parse::<f64>()?,
            total_volume: interval.total_volume.trim().parse::<f64>()?,
            to_asset_volume_usd: interval.to_asset_volume_usd.trim().parse::<f64>()?,
            to_rune_volume_usd: interval.to_rune_volume_usd.trim().parse::<f64>()?,
            to_trade_volume_usd: interval.to_trade_volume_usd.trim().parse::<f64>()?,
            from_trade_volume_usd: interval.from_trade_volume_usd.trim().parse::<f64>()?,
            synth_mint_volume_usd: interval.synth_mint_volume_usd.trim().parse::<f64>()?,
            synth_redeem_volume_usd: interval.synth_redeem_volume_usd.trim().parse::<f64>()?,
            total_volume_usd: interval.total_volume_usd.trim().parse::<f64>()?,
            to_asset_fees: interval.to_asset_fees.trim().parse::<f64>()?,
            to_rune_fees: interval.to_rune_fees.trim().parse::<f64>()?,
            to_trade_fees: interval.to_trade_fees.trim().parse::<f64>()?,
            from_trade_fees: interval.from_trade_fees.trim().parse::<f64>()?,
            synth_mint_fees: interval.synth_mint_fees.trim().parse::<f64>()?,
            synth_redeem_fees: interval.synth_redeem_fees.trim().parse::<f64>()?,
            total_fees: interval.total_fees.trim().parse::<f64>()?,
            to_asset_average_slip: interval.to_asset_average_slip.trim().parse::<f64>()?,
            to_rune_average_slip: interval.to_rune_average_slip.trim().parse::<f64>()?,
            to_trade_average_slip: interval.to_trade_average_slip.trim().parse::<f64>()?,
            from_trade_average_slip: interval.from_trade_average_slip.trim().parse::<f64>()?,
            synth_mint_average_slip: interval.synth_mint_average_slip.trim().parse::<f64>()?,
            synth_redeem_average_slip: interval.synth_redeem_average_slip.trim().parse::<f64>()?,
            average_slip: interval.average_slip.trim().parse::<f64>()?,
            rune_price_usd: interval.rune_price_usd.trim().parse::<f64>()?,
        })
    }
}